@Library("shared-library@main") _
   
pipeline {
    agent { label 'slave01' } // Use the Jenkins slave labeled 'slave01'

    environment {
        DOCKER_IMAGE_NAME = 'ivolve-app'
        DOCKER_HUB_USR = 'ahmedmahmood44'
        DOCKER_HUB_CREDENTIALS = credentials('Docker')
        NAMESPACE='ivolve'
        Git-Repo-Name = 'CloudDevOpsProject'
        Git-Email= 'ahmedmahmuod724@gmail.com' 
        
    }
         
    stages {
        
          stage('Git Checkout') {
            steps {
                script {
                    echo 'Cloning code from Git repository...'
                }
                git branch: 'main', url: 'https://github.com/Ahmed-Jim1/CloudDevOpsProject.git'
            }
        }
        
     
         stage('Build and Test') {
            steps { 
               dir('FinalProjectCode'){
               buildAndTest()
               }
            }
        }
        
         stage('SonarQube Analysis') {
            steps {
               
               dir('FinalProjectCode'){
                sonarQubeAnalysis()
               }
            }
        }
        
        stage('Build Docker Image') {
            steps {
               dir('FinalProjectCode'){
                script {
                    dockerTasks.buildDockerImage(DOCKER_IMAGE_NAME, env.BUILD_NUMBER)
                }
               }  
            }
        }
  
        stage('Login and Push to Docker Hub') {
            steps {
               dir('FinalProjectCode'){ 
               script {
                    dockerTasks.dockerLogin(DOCKER_HUB_CREDENTIALS_USR, DOCKER_HUB_CREDENTIALS_PSW)
                    dockerTasks.pushDockerImage(DOCKER_IMAGE_NAME, env.BUILD_NUMBER, DOCKER_HUB_USR)
                }
               }
            }
        }

        stage('UpdateGit') {  //update deployment file to set new image to use Argo-CD
            steps {
                    dir('AKS-ArgoCD'){
                       
                 script {
                  updateGit(Git-Repo-Name, "${env.BUILD_NUMBER}", Git-Email)
                   }
                       
               }        
            }
        }
        
    }


    post {
        
        always {
            echo "Cleaning up Docker resources..."
            script {
                dockerTasks.dockerCleanup()
            }
        }
        
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}
